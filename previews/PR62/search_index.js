var documenterSearchIndex = {"docs":
[{"location":"guide/contours/#Contours","page":"Plotting Contours","title":"Contours","text":"","category":"section"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"This guide shows a few different ways to measure and visualize contours of images.","category":"page"},{"location":"guide/contours/#Using-Plots","page":"Plotting Contours","title":"Using Plots","text":"","category":"section"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"The most basic way to create a contour plot is simply to use Plots.jl contour and contourf functions on your image.","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Let's see how that works:","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"using AstroImages, Plots\n\n\n# First load a FITS file of interest\nfname = download(\n    \"https://www.chandra.harvard.edu/photo/2014/archives/fits/herca/herca_radio.fits\",\n    \"herca-radio.fits\"\n)\n\nherca = load(\"herca-radio.fits\")","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Create a contour plot","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"contour(herca)","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Create a filled contour plot","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"contourf(herca)","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Specify the number of levels","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"contour(herca, levels=5)","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Specify specific levels","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"contour(herca, levels=[1, 1000, 5000])","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Overplot contours on image:","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"implot(herca)\ncontour!(herca, levels=4, color=:cyan)","category":"page"},{"location":"guide/contours/#Using-Contour.jl","page":"Plotting Contours","title":"Using Contour.jl","text":"","category":"section"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"For more control over how contours are calculated and plotted, you can use the Contour.jl package:","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"using Contour\nherca = load(\"herca-radio.fits\")\n\np = implot(herca, cmap=nothing, colorbar=false)\n\n# Note: Contour.jl only supports float inputs.\n# See https://github.com/JuliaGeometry/Contour.jl/issues/73\nfor cl in levels(contours(dims(herca)..., float.(herca)))\n    lvl = level(cl) # the z-value of this contour level\n    for line in lines(cl)\n        xs, ys = coordinates(line) # coordinates of this line segment\n        plot!(p, xs, ys, line_z=lvl, label=\"\")\n    end\nend\n\np","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"Here we plot just the contours, now in world coordinates:","category":"page"},{"location":"guide/contours/","page":"Plotting Contours","title":"Plotting Contours","text":"p = plot(xlabel=\"RA\", ylabel=\"DEC\")\nfor cl in levels(contours(dims(herca)..., float.(herca)))\n    lvl = level(cl) # the z-value of this contour level\n    for line in lines(cl)\n        xs, ys = coordinates(line) # coordinates of this line segment\n        worldcoords = map(zip(xs,ys)) do pixcoord\n            pix_to_world(herca, [pixcoord...])\n        end\n        plot!(p, getindex.(worldcoords,1), getindex.(worldcoords,2), line_z=lvl, label=\"\")\n    end\nend\np","category":"page"},{"location":"guide/image-filtering/#Image-Filtering","page":"Blurring & Filtering Images","title":"Image Filtering","text":"","category":"section"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"The package ImageFiltering.jl makes it easy to apply arbitrary filters to images.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"using AstroImages\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"guide/image-filtering/#Gaussian-Blurs","page":"Blurring & Filtering Images","title":"Gaussian Blurs","text":"","category":"section"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"Let's start by downloading a radio image of Hercules A:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"using AstroImages\nusing ImageFiltering\n\nfname = download(\n    \"https://www.chandra.harvard.edu/photo/2014/archives/fits/herca/herca_radio.fits\",\n    \"herca-radio.fits\"\n)\n\nherca = load(\"herca-radio.fits\")","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"Let's now apply a Gaussian blur (aka a low pass filter) using the imfilter function:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"herca_blur_20 = imfilter(herca, Kernel.gaussian(20.0))","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"The image has been smoothed out by convolving it with a wide Gaussian.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"Let's now do the opposite and perform a high-pass filter. This will bring out faint variations in structure. We can do this by subtracting a blurred image from the original:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"herca_blur_4 = imfilter(herca, Kernel.gaussian(4.0))\nherca_highpass = herca .- herca_blur_4","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"We now see lots of faint structure inside the jets!","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"Finally, let's adjust how the image is displayed and apply a non-linear stretch:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"imview(\n    herca_highpass,\n    cmap=:seaborn_rocket_gradient,\n    clims=(-50,1500),\n    stretch=asinhstretch\n)","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"If you have Plots loaded, we can add a colorbar and coordinate axes by switching to implot:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"using Plots\nimplot(\n    herca_highpass,\n    cmap=:seaborn_rocket_gradient,\n    clims=(-50,1500),\n    stretch=asinhstretch\n)","category":"page"},{"location":"guide/image-filtering/#Median-Filtering","page":"Blurring & Filtering Images","title":"Median Filtering","text":"","category":"section"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"In addition to linear filters using imfilter, ImageFiltering.jl also includes a great function called mapwindow. This functions allows you to map an arbitrary function over a patch of an image.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"Let's use mapwindow to perform a median filter. This is a great way to suppress salt and pepper noise, or remove stars from some images.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"We'll use a Hubble picture of the Eagle nebula:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"using AstroImages\nusing ImageFiltering\n\nfname = download(\n    \"https://ds9.si.edu/download/data/673nmos.fits\",\n    \"eagle-673nmos.fits\"\n)\n\neagle673 = load(\"eagle-673nmos.fits\")","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"The data is originally from https://esahubble.org/projects/fits_liberator/eagledata/.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"We can apply a median filter using mapwindow. Make sure the patch size is an odd number in each direction!","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"using Statistics\nmedfilt = copyheader(eagle673, mapwindow(median, eagle673, (11,11)))","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"We use copyheader here since mapwindow returns a plain array and drops the image meta data.","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"We can put this side by side with the original to see how some of the faint stars have been removed from the image:","category":"page"},{"location":"guide/image-filtering/","page":"Blurring & Filtering Images","title":"Blurring & Filtering Images","text":"imview([eagle673[1:800,1:800]; medfilt[1:800,1:800]])","category":"page"},{"location":"manual/array/#Array-Operations","page":"Array Operations","title":"Array Operations","text":"","category":"section"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"You can operate on an AstroImage like any other Julia array.","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"using AstroImages\n\nimg = AstroImage(randn(10,10))","category":"page"},{"location":"manual/array/#Indexing","page":"Array Operations","title":"Indexing","text":"","category":"section"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"You can look up individual pixels (see Conventions)","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"img[1,1] # Bottom left","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"img[1:5,1:5]","category":"page"},{"location":"manual/array/#Broadcasting","page":"Array Operations","title":"Broadcasting","text":"","category":"section"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"AstroImages participate in broadcasting as expected:","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"@. img + img^2 + 2img^3","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"You can update them in-place (if the underlying array you passed supports mutation)","category":"page"},{"location":"manual/array/","page":"Array Operations","title":"Array Operations","text":"img[1:5,:] .= 0\nimg","category":"page"},{"location":"manual/conventions/#Conventions","page":"Conventions","title":"Conventions","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"In the Julia Astro ecosystem, images follow the following conventions.","category":"page"},{"location":"manual/conventions/#Axes","page":"Conventions","title":"Axes","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"For simple 2D images, the first axis is the horizontal axis and the second axis is the vertical axis. So images are indexed by img[xi, yi].","category":"page"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"The origin is at the bottom left of the image, so img[1,1] refers to the bottom left corner as does img[begin,begin]. img[end,end] is the top right corner, img[begin,end] is the top left, etc.","category":"page"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"Note that this is transposed and flipped from how Julia prints arrays at the REPL.","category":"page"},{"location":"manual/conventions/#Pixels","page":"Conventions","title":"Pixels","text":"","category":"section"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"This library considers the exact location of img[1,1] to be the center of the pixel in the bottom left corner. This means that plot limits should have the 1 tick slightly away from the left/bottom spines of the image. The default plot limits for implot are -0.5 to end+0.5 along both axes.","category":"page"},{"location":"manual/conventions/","page":"Conventions","title":"Conventions","text":"There is a known bug with the Plots.jl GR backend that leads ticks to be slightly offset. PyPlot and Plotly backends show the correct tick locations.","category":"page"},{"location":"guide/reproject/#Reprojecting-Images","page":"Reprojecting Images","title":"Reprojecting Images","text":"","category":"section"},{"location":"guide/reproject/","page":"Reprojecting Images","title":"Reprojecting Images","text":"Integration with the Reproject.jl package is not yet complete.","category":"page"},{"location":"manual/getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To get started, you will first need to install AstroImages. After starting Julia, enter package-mode by typing ] and then","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add AstroImages","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To display images and save them in traditional graphics formats like PNG, JPG, GIF, etc., you will also need to add the ImageIO package. Once installed, this package doesn't need to be loaded explicitly.","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"For some of the more advanced visualizations you may also want Plots:","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add Plots","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"To load the package, run:","category":"page"},{"location":"manual/getting-started/","page":"Getting Started","title":"Getting Started","text":"using AstroImages\n# And if desired:\nusing Plots","category":"page"},{"location":"manual/headers/#Headers","page":"Headers","title":"Headers","text":"","category":"section"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"FITS files consist of one or more HDUs (header data units), and each HDU can contain an N-dimensional image or table. Before the data is a header. Headers contain (key, value, comment) groups as well as dedicated long-form COMMENT and HISTORY sections used to document, for example, the series of post-processing steps applied to an image.","category":"page"},{"location":"manual/headers/#Accessing-Headers","page":"Headers","title":"Accessing Headers","text":"","category":"section"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"Here are some examples of how to set and read keys, comments, and history.","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"Well start by making a blank image.","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"img = AstroImage(zeros(10,10))\n# Set keys to values with different data types\nimg[\"KEY1\"] = 2   # Integer\nimg[\"KEY2\"] = 2.0 # Float\nimg[\"KEY3\"] = \"STRING\"\nimg[\"KEY4\"] = true\nimg[\"KEY5\"] = false\nimg[\"KEY6\"] = nothing\n\n# Set comments\nimg[\"KEY1\", Comment] = \"A key with an integer value\"\n\n# Read keys\na = img[\"KEY3\"]\n\n# Read comment\ncom = img[\"KEY1\", Comment]\n\n# Add long-form COMMENT\npush!(img, Comment, \"\"\"\nWe now describe how to add a long form comment to the end of a header.\n\"\"\")\n\n# Add HISTORY entry\npush!(img, History, \"\"\"\nWe now describe how to add a long form history to the end of a header.\n\"\"\")\n\n# Retrieve long form comments/ history\ncomment_strings = img[Comment]\nhistory_strings = img[History]","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"Note that floating point values are formatted as ASCII strings when written to the FITS files, so the precision may be limited.","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"AstroImage objects wrap a FITSIO.jl FITSHeader. If necessary, you can recover it using header(img); however, in most cases you can access header keywords directly from the image.","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"API docs:","category":"page"},{"location":"manual/headers/","page":"Headers","title":"Headers","text":"Comment\nHistory\nheader","category":"page"},{"location":"manual/loading-images/#Loading-Images","page":"Loading & Saving Images","title":"Loading Images","text":"","category":"section"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"FITS (Flexible Image Transport System) files can be loaded and saved using AstroImages thanks to the FITSIO package.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"AstroImages is registered with FileIO, so if you have FileIO and AstroImages installed you can get started with the load function. When you pass a file name with the appropriate file extension (\".fits\", \".fit\", etc.) FileIO will import AstroImages automatically.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Alternatively, you can use the AstroImage contructor instead of load. This will work on fits files with any file extension, including compressed files (e.g. \".fits.gz\").","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"myfitsimg.fits\")\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n 0.0  0.0  0.0  0.0  0.0  …  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n ⋮                        ⋱\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Note: if you are in an interactive environment like VSCode, Jupyter, or Pluto, instead of a REPL, AstroImages are automatically rendered to images and displayed. You can see this plain text output by explicitly calling: show(stdout, MIME(\"text/plain\"), img).","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Or:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = AstroImage(\"myfitsimg.fits.gz\")\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n 0.0  0.0  0.0  0.0  0.0  …  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n ⋮                        ⋱\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"A FITS file can contain multiple N-dimensional images and tables. When you call load or AstroImage with a file name and no other arguments, the package will search through the file and return the first image HDU. That is, it will skip any FITS tables or empty HDUs with only headers.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can also specify an HDU number explicitly:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"myfitsimg.fits\",1)\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled Base.OneTo(1600) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(1600) ForwardOrdered Regular Points\n...","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"This way, you can load specific images from multi-extension files.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can load all HDUs simultaneously by passing ::","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> hdus = load(\"multiext.fits\", :);\njulia> hdus[2] # Second HDU as an AstroImage\n10×10 AstroImage{Float64,2} with dimensions:\n  X Sampled Base.OneTo(10) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(10) ForwardOrdered Regular Points\n -0.777315  -1.36683   -0.580179     1.39629      …  -2.14298     0.450059   0.432065\n -1.09619    0.789249   0.938415     0.959903        -0.88995    -1.29406   -0.4291\n  0.47427   -1.41855    0.814823    -1.15975          0.0427149  -1.20116   -0.0920709\n -0.179858  -1.60228    1.09648     -0.497927        -1.31824    -0.156529  -0.0223846\n  2.64162    0.131437   0.320476     0.331197        -0.914713   -1.55162   -0.18862\n  0.209669  -1.17923   -0.656512     0.000775311  …   0.377461   -0.24278    0.967202\n  1.01442   -0.762895  -2.13238     -0.456932        -0.415733   -1.21416   -1.6108\n  0.385626   0.389335  -0.00726015   0.309936        -0.533175    0.157878   0.100876\n -1.24799    0.461216  -0.868826    -0.255654        -0.37151     0.49479   -1.87129\n  1.39356    2.29254    0.0548325    1.50674         -0.0880865   0.580978  -1.81629\njulia> # Or:\njulia> hdu1, hdu2, hdu3 = load(\"multiext.fits\", :);","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"There is also limited support for table HDUs. In this case, a bare-bones Tables.jl compatible object is returned.","category":"page"},{"location":"manual/loading-images/#Dimension-Names","page":"Loading & Saving Images","title":"Dimension Names","text":"","category":"section"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You may have noticed the entries above the image array:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"10×10 AstroImage{Float64,2} with dimensions:\n  X Sampled Base.OneTo(10) ForwardOrdered Regular Points,\n  Y Sampled Base.OneTo(10) ForwardOrdered Regular Points","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"AstroImages are based on Dimensional Data. Each axis is assigned a dimension name and the indices are tracked. The automatic dimension names are X, Y, Z, Dim{4}, Dim{5}, and so on; however you can pass in other names or orders to the load function and/or AstroImage contructor:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> img = load(\"img.fits\", 1, (Y=1:1600,Z=1:1600))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  Y Sampled 1:1600 ForwardOrdered Regular Points,\n  Z Sampled 1:1600 ForwardOrdered Regular Points","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"Other useful dimension names are Spec for spectral axes, Pol for polarization data, and Ti for time axes.","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"These will be further discussed in Dimensions and World Coordinates.","category":"page"},{"location":"manual/loading-images/#Saving-Images","page":"Loading & Saving Images","title":"Saving Images","text":"","category":"section"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can save one or more AstroImages and tables to a FITS file using the save function:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> save(\"abc.fits\", astroimage1, astroimage2, table1)","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can also save individual images to traditional graphics formats by first rendering them with imview (for more on imview, see Displaying Images).","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> save(\"abc.png\", imview(astroimage1))","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"You can save animated GIFs by saving a 3D datacube that has been rendered with imview:","category":"page"},{"location":"manual/loading-images/","page":"Loading & Saving Images","title":"Loading & Saving Images","text":"julia> cube =  imview(AstroImage(randn(100,100,10)));\njulia> save(\"abc.gif\", cube, fps=10)\n\njulia> # Or a more complex example (changing color schemes each frame)\njulia> img = randn(10,10)\njulia> cube2 = [imview(img1, cmap=:magma) ;;; imview(img2, cmap=:plasma) ;;; imview(img3, cmap=:viridis)]\n\njulia> # Alternative syntax:\njulia> cube2 = cat(imview(img1, cmap=:magma), imview(img2, cmap=:plasma), imview(img3, cmap=:viridis), dims=3)\n\njulia> save(\"abc.gif\", cube, fps=10)","category":"page"},{"location":"guide/image-transformations/#Image-Transformations","page":"Transforming Images","title":"Image Transformations","text":"","category":"section"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"The ImageTransformations.jl package contains many useful functions for manipulating astronomical images.","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"Note however that many of these functions drop the AstroImage wrapper and return plain arrays or OffsetArrays. They can be re-wrapped using copyheader or shareheader if you'd like to preserve the FITS header, dimension labels, WCS information, etc.","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"You can install ImageTransformations by running ] add ImageTransformations at the REPL.","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"using AstroImages\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"For these examples, we'll download an image of the Antenae galaxies from Hubble:","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"using AstroImages\nusing ImageTransformations\n\nfname = download(\n    \"https://esahubble.org/static/projects/fits_liberator/datasets/antennae/blue.fits\",\n    \"ant-blue.fits\"\n)\n\nantblue = load(\"ant-blue.fits\")\n\n# We'll change the defaults to avoid setting them each time\nAstroImages.set_clims!(Percent(99))\nAstroImages.set_cmap!(:ice)\nAstroImages.set_stretch!(asinhstretch)\n\nimview(antblue)","category":"page"},{"location":"guide/image-transformations/#Rotations","page":"Transforming Images","title":"Rotations","text":"","category":"section"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"We can rotate images using the imrotate function.","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"imrotate(antblue, 3π/4) |> imview","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"The rotation angle is in radians, but you can use the function rad2deg to convert from degrees.","category":"page"},{"location":"guide/image-transformations/#Resizing","page":"Transforming Images","title":"Resizing","text":"","category":"section"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"We can resize images using the imresize function:","category":"page"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"imresize(antblue, ratio=0.2) |> imview","category":"page"},{"location":"guide/image-transformations/#Arbitrary-Transformations","page":"Transforming Images","title":"Arbitrary Transformations","text":"","category":"section"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"Arbitrary transformations can be performed using ImageTransformation's warp function. See the documentation linked above for more details.","category":"page"},{"location":"guide/image-transformations/#Mapping-from-One-Coordinate-System-to-Another","page":"Transforming Images","title":"Mapping from One Coordinate System to Another","text":"","category":"section"},{"location":"guide/image-transformations/","page":"Transforming Images","title":"Transforming Images","text":"For transforming an image from one coordiante system (say, RA & DEC) to another (e.g., galactic lattitude & logitude), see Reprojecting Images.","category":"page"},{"location":"manual/converting-to-rgb/#Converting-to-RGB","page":"Converting to RGB","title":"Converting to RGB","text":"","category":"section"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"If you have two or more images of the same scene taken at different wavelengths, you may wish to combine them to create a colour composite.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"For ultimate control, you can do this manually using imview. Simply map your channels to RGB values using imview and then sum the results.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"For convenience, AstroImages.jl provides the function composecolors.","category":"page"},{"location":"manual/converting-to-rgb/#Using-composecolors","page":"Converting to RGB","title":"Using composecolors","text":"","category":"section"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"We'll demonstrate composecolors using Hubble images of the Antenae colliding galaxies.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"One can be very scientific about this process, but often the goal of producing color composites is aesthetic or about highlighting certain features for public consumption.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"I'll set the default color map to grayscale to avoid confusion.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"using AstroImages\n\nAstroImages.set_cmap!(nothing)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Let's start by downloading the separate color channel FITS files:","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"# TODO: workaround until stacked images are relocated\nantred = AstroImage(download(\"https://esahubble.org/static/projects/fits_liberator/datasets/antennae/red.fits\"))[:, begin+14:end]","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"antgreen = AstroImage(download(\"https://esahubble.org/static/projects/fits_liberator/datasets/antennae/green.fits\"))","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"# TODO: workaround until stacked images are relocated\nantblue = AstroImage(download(\"https://esahubble.org/static/projects/fits_liberator/datasets/antennae/blue.fits\"))[:, begin+14:end]","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"# TODO: workaround until stacked images are relocated\nanthalph = AstroImage(download(\"https://esahubble.org/static/projects/fits_liberator/datasets/antennae/hydrogen.fits\"))[:, begin+14:end]; # Hydrogen-Alpha; we'll revisit later","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"The images will have to be aligned and cropped to the same size before making a color composite.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"In order to compose these images, we'll have to match the relative intensity scales and clip outlying values. Thankfully, composecolors handles most of these details automatically.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb1 = composecolors([antred, antgreen, antblue])","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"It's a start!","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"By default, if you provide three images these are mapped to the color channels red, green, and blue. The intensities are limited to Percent(99.5).","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"We can now tweak these defaults to our tastes. We could try clamping the intensities more agressively to bring out more of the galaxy structure:","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb2 = composecolors(\n    [antred, antgreen, antblue],\n    clims=Percent(97)\n)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"This looks okay but saturates the galaxy cores.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Let's take care of that gash through the image by just blanking it out.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"mask = antgreen .== antgreen[end,begin]\n# remove holes in the mask\nusing ImageFiltering, Statistics\nmask = BitMatrix(mapwindow(median, mask, (3,3)))\nimview(mask)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"antred[mask] .= NaN\nantgreen[mask] .= NaN\nantblue[mask] .= NaN\nanthalph[mask] .= NaN\nnothing # hide","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Typically we need to perform a \"gamma correction\" aka non-lienar stretch to map the wide dynamic range of astronomical images into a narrower human visible range. We can do this using the stretch keyword. An asinhstretch is typically recommended when preparing RGB images:","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb3 = composecolors(\n    [antred, antgreen, antblue],\n    stretch=asinhstretch\n)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Keywords like strech, clims, etc can be either a single value for all channels or a list of separate values/functions per channel.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"The green channel appears to be quite faint compared to the red and blue channels. We can modify that by adjusting the relative intensities of the channels.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"We could also do this using a combination of the contrast and bias keywords.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb4 = composecolors(\n    [antred, antgreen, antblue],\n    stretch=asinhstretch,\n    multiplier=[1,1.7,1]\n)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"That's better! Let's go one step further, and incorporate a fourth chanel: Hydrogen Alpha. Hydrogen Alpha is a narrow filter centered around one of the emission lines of Hydrogen atoms. It traces locations with hot gas; mostly star-formation regions in this case.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"imview(anthalph, cmap=:magma, clims=Zscale())","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"We'll now need to specify the color channels we want to use for each wavelength since we can't use just the default three RGB. We can use any named color or julia ColorScheme.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb5 = composecolors(\n    [antred, antgreen, antblue, anthalph],\n    [\"red\", \"green\", \"blue\", \"maroon1\"],\n    stretch=asinhstretch,\n    multiplier=[1,1.7,1,0.8]\n)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Additionally, I'd like to just show the brightest areas of Hydrogen alpha emission rather than adding a diffuse pink glow. We can turn off the stretch for this one channel:","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"rgb6 = composecolors(\n    [antred, antgreen, antblue, anthalph],\n    [\"red\", \"green\", \"blue\", \"maroon1\"],\n    stretch=[\n        asinhstretch,\n        asinhstretch,\n        asinhstretch,\n        identity,\n    ],\n    multiplier=[1,1.7,1,0.8]\n)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"Finally, we can crop the image and save it as a PNG.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"crop = rgb6[200:end-100,50:end-50]","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"save(\"antenae-composite.png\", crop)","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"If you want to save it in a format like JPG that doesn't support transparent pixels, you could replace the masked area with zeros instead of NaN.","category":"page"},{"location":"manual/converting-to-rgb/","page":"Converting to RGB","title":"Converting to RGB","text":"# restore package defaults\nusing AstroImages\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"\nFileIO.load\nFileIO.save\nFileIO.query\n\nAstroImages.AstroImage\nAstroImages.imview\nAstroImages.implot\n\nAstroImages.Comment\nAstroImages.History\n\nWCS.pix_to_world\nWCS.world_to_pix\n\nDimensionalData.X\nDimensionalData.Y\nDimensionalData.Z\nDimensionalData.Dim\nDimensionalData.At\nDimensionalData.Near\nDimensionalData.dims\nDimensionalData.refdims\n\nAstroImages.header\nAstroImages.wcs\nAstroImages.WCSGrid\nAstroImages.composecolors\nAstroImages.Zscale\nAstroImages.Percent\nAstroImages.logstretch\nAstroImages.powstretch\nAstroImages.sqrtstretch\nAstroImages.squarestretch\nAstroImages.asinhstretch\nAstroImages.sinhstretch\nAstroImages.powerdiststretch\nAstroImages.copyheader\nAstroImages.shareheader\nAstroImages.recenter","category":"page"},{"location":"api/#FileIO.load","page":"API","title":"FileIO.load","text":"load(filename) loads the contents of a formatted file, trying to infer the format from filename and/or magic bytes in the file (see query).\nload(strm) loads from an IOStream or similar object. In this case, there is no filename extension, so we rely on the magic bytes for format identification.\nload(File{format\"PNG\"}(filename)) specifies the format directly, and bypasses the format query.\nload(Stream{format\"PNG\"}(io)) specifies the format directly, and bypasses the format query.\nload(f; options...) passes keyword arguments on to the loader.\n\n\n\n\n\n","category":"function"},{"location":"api/#FileIO.save","page":"API","title":"FileIO.save","text":"save(filename, data...) saves the contents of a formatted file, trying to infer the format from filename.\nsave(Stream{format\"PNG\"}(io), data...) specifies the format directly, and bypasses the format query.\nsave(File{format\"PNG\"}(filename), data...) specifies the format directly, and bypasses the format query.\nsave(f, data...; options...) passes keyword arguments on to the saver.\n\n\n\n\n\n","category":"function"},{"location":"api/#FileIO.query","page":"API","title":"FileIO.query","text":"query(filename; checkfile=true)\n\nReturn a File object with information about the format inferred from the file's extension and/or magic bytes. If filename already exists, the file's magic bytes will take priority unless checkfile is false.\n\n\n\n\n\nquery(io, [filename])\n\nReturns a Stream object with information about the format inferred from the magic bytes.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.AstroImage","page":"API","title":"AstroImages.AstroImage","text":"AstroImage\n\nProvides access to a FITS image along with its accompanying header and WCS information, if applicable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.imview","page":"API","title":"AstroImages.imview","text":"imview(img; clims=Percent(99.5), stretch=identity, cmap=:magma, contrast=1.0, bias=0.5)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to Colors according to clims, stretch, and cmap.\n\nThe data is first clamped to clims, which can either be a tuple of (min, max) values or a function accepting an iterator of pixel values that returns (min, max). By default, clims=Percent(99.5) which sets the display min and max to the central 99.5 percentile range of pixel values. Convenient functions to use for clims are: extrema, Zscale, and Percent(p)\n\nNext, the data is rescaled to [0,1] and remapped according to the function stretch. Stretch can be any monotonic fuction mapping values in the range [0,1] to some range [a,b]. Note that log(0) is not defined so is not directly supported. For a list of convenient stretch functions, see: logstretch, powstretch, squarestretch, asinhstretch, sinhstretch, powerdiststretch\n\nFinally the data is mapped to RGB values according to cmap. If cmap is nothing, grayscale is used. ColorSchemes.jl defines hundreds of colormaps. A few nice ones for images include: :viridis, :magma, :plasma, :thermal, and :turbo.\n\nCrucially, this function returns a view over the underlying data. If img is updated then those changes will be reflected by this view with the exception of clims which is not recalculated.\n\nNote: if clims or stretch is a function, the pixel values passed in are first filtered to remove non-finite or missing values.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\nAutomatic Display\n\nArrays wrapped by AstroImageMat() get displayed as images automatically by calling imview on them with the default settings when using displays that support showing PNG images.\n\nMissing data\n\nPixels that are NaN or missing will be displayed as transparent when cmap is set or black if. +/- Inf will be displayed as black or white respectively.\n\nExporting Images\n\nThe view returned by imview can be saved using general FileIO.save methods. Example:\n\nv = imview(data, cmap=:magma, stretch=asinhstretch, clims=Percent(95))\nsave(\"output.png\", v)\n\n\n\n\n\nimview(img::AbstractArray{<:Complex}; ...)\n\nWhen applied to an image with complex values, display the magnitude of the pixels using imview and display the phase angle as a panel below using a cyclical color map. For more customatization, you can create a view like this yourself:\n\nvcat(\n    imview(abs.(img)),\n    imview(angle.(img)),\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.implot","page":"API","title":"AstroImages.implot","text":"implot(\n    img::AbstractArray;\n    clims=Percent(99.5),\n    stretch=identity,\n    cmap=:magma,\n    bias=0.5,\n    contrast=1,\n    wcsticks=true,\n    grid=true,\n    platescale=1\n)\n\nCreate a read only view of an array or AstroImageMat mapping its data values to an array of Colors. Equivalent to:\n\nimplot(\n    imview(\n        img::AbstractArray;\n        clims=Percent(99.5),\n        stretch=identity,\n        cmap=:magma,\n        bias=0.5,\n        contrast=1,\n    ),\n    wcsn=1,\n    wcsticks=true,\n    wcstitle=true,\n    grid=true,\n    platescale=1\n)\n\nImage Rendering\n\nSee imview for how data is mapped to RGBA pixel values.\n\nWCS & Image Coordinates\n\nIf provided with an AstroImage that has WCS headers set, the tick marks and plot grid are calculated using WCS.jl. By default, use the first WCS coordinate system. The underlying pixel coordinates are those returned by dims(img) multiplied by platescale. This allows you to overplot lines, regions, etc. using pixel coordinates. If you wish to compute the pixel coordinate of a point in world coordinates, see world_to_pix.\n\nwcsn (default 1) select which WCS transform in the headers to use for ticks & grid\nwcsticks (default true if WCS headers present) display ticks and labels, and title using world coordinates\nwcstitle (default true if WCS headers present and length(refdims(img))>0). When slicing a cube, display the location along unseen axes in world coordinates instead of pixel coordinates.\ngrid (default true) show a grid over the plot. Uses WCS coordinates if wcsticks is true, otherwise pixel coordinates multiplied by platescale.\nplatescale (default 1). Scales the underlying pixel coordinates to ease overplotting, etc. If wcsticks is false, the displayed pixel coordinates are also scaled.\n\nDefaults\n\nThe default values of clims, stretch, and cmap are extrema, identity, and nothing respectively. You may alter these defaults using AstroImages.set_clims!,  AstroImages.set_stretch!, and AstroImages.set_cmap!.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.Comment","page":"API","title":"AstroImages.Comment","text":"Index for accessing a comment associated with a header keyword or COMMENT entry.\n\nExample:\n\nimg = AstroImage(randn(10,10))\nimg[\"ABC\"] = 1\nimg[\"ABC\", Comment] = \"A comment describing this key\"\n\npush!(img, Comment, \"The purpose of this file is to demonstrate comments\")\nimg[Comment] # [\"The purpose of this file is to demonstrate comments\"]\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.History","page":"API","title":"AstroImages.History","text":"Allows accessing and setting HISTORY header entries\n\nimg = AstroImage(randn(10,10))\npush!(img, History, \"2023-04-19: Added history entry.\")\nimg[History] # [\"2023-04-19: Added history entry.\"]\n\n\n\n\n\n","category":"type"},{"location":"api/#WCS.pix_to_world","page":"API","title":"WCS.pix_to_world","text":"pix_to_world(wcs, pixcoords)\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same shape as pixcoords.\n\n\n\n\n\npix_to_world(img::AstroImage, pixcoords; all=false)\n\nGiven an astro image, look up the world coordinates of the pixels given by pixcoords. World coordinates are resolved using WCS.jl and a WCSTransform calculated from any FITS header present in img. If no WCS information is in the header, or the axes are all linear, this will just return pixel coordinates.\n\npixcoords should be the coordinates in your current selection of the image. For example, if you select a slice like this:\n\njulia> cube = load(\"some-3d-cube.fits\")\njulia> slice = cube[10:20, 30:40, 5]\n\nThen to look up the coordinates of the pixel in the bottom left corner of slice, run:\n\njulia> world_coords = pix_to_world(img, [1, 1])\n[10, 30]\n\nIf WCS information was present in the header of cube, then those coordinates would be resolved using axis 1, 2, and 3 respectively.\n\nTo include world coordinates in all axes, pass all=true\n\njulia> world_coords = pix_to_world(img, [1, 1], all=true)\n[10, 30, 5]\n\n!! Coordinates must be provided in the order of dims(img). If you transpose an image, the order you pass the coordinates should not change.\n\n\n\n\n\n","category":"function"},{"location":"api/#WCS.world_to_pix","page":"API","title":"WCS.world_to_pix","text":"world_to_pix(wcs, worldcoords)\n\nConvert the array of world coordinates worldcoords to pixel coordinates according to the WCSTransform wcs. worldcoords is a 2-d array where \"worldcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same size as worldcoords.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.X","page":"API","title":"DimensionalData.Dimensions.X","text":"X <: XDim\n\nX(val=:)\n\nX Dimension. X <: XDim <: IndependentDim\n\nExamples\n\nxdim = X(2:2:10)\n\nval = A[X(1)]\n\nmean(A; dims=X)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Y","page":"API","title":"DimensionalData.Dimensions.Y","text":"Y <: YDim\n\nY(val=:)\n\nY Dimension. Y <: YDim <: DependentDim\n\nExamples\n\nydim = Y(['a', 'b', 'c'])\n\nval = A[Y(1)]\n\nmean(A; dims=Y)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Z","page":"API","title":"DimensionalData.Dimensions.Z","text":"Z <: ZDim\n\nZ(val=:)\n\nZ Dimension. Z <: ZDim <: Dimension\n\nExample:\n\nzdim = Z(10:10:100)\n\nval = A[Z(1)]\n\nmean(A; dims=Z)\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Dim","page":"API","title":"DimensionalData.Dimensions.Dim","text":"Dim{S}(val=:)\n\nA generic dimension. For use when custom dims are required when loading data from a file. Can be used as keyword arguments for indexing.\n\nDimension types take precedence over same named Dim types when indexing with symbols, or e.g. creating Tables.jl keys.\n\njulia> dim = Dim{:custom}(['a', 'b', 'c'])\ncustom ['a', 'b', 'c']\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Lookups.At","page":"API","title":"DimensionalData.Dimensions.Lookups.At","text":"At <: IntSelector\n\nAt(x; atol=nothing, rtol=nothing)\nAt(a, b; kw...)\n\nSelector that exactly matches the value on the passed-in dimensions, or throws an error. For ranges and arrays, every intermediate value must match an existing value - not just the end points.\n\nx can be any value to select a single index, or a Vector of values to select vector of indices. If two values a and b are used, the range between them will be selected.\n\nKeyword atol is passed to isapprox.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(At(20)), Y(At(6))]\n\n# output\n\n5\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.Lookups.Near","page":"API","title":"DimensionalData.Dimensions.Lookups.Near","text":"Near <: IntSelector\n\nNear(x)\nNear(a, b)\n\nSelector that selects the nearest index to x.\n\nWith Points this is simply the lookup values nearest to the x, however with Intervals it is the interval center nearest to x. This will be offset from the index value for Start and End locus.\n\nx can be any value to select a single index, or a Vector of values to select vector of indices. If two values a and b  are used, the range between the nearsest value to each of them will be selected.\n\nExample\n\nusing DimensionalData\n\nA = DimArray([1 2 3; 4 5 6], (X(10:10:20), Y(5:7)))\nA[X(Near(23)), Y(Near(5.1))]\n\n# output\n4\n\n\n\n\n\n","category":"type"},{"location":"api/#DimensionalData.Dimensions.dims","page":"API","title":"DimensionalData.Dimensions.dims","text":"dims(x, query) => Tuple{Vararg{Dimension}}\ndims(x, query...) => Tuple{Vararg{Dimension}}\n\nGet the dimension(s) matching the type(s) of the query dimension.\n\nLookup can be an Int or an Dimension, or a tuple containing any combination of either.\n\nArguments\n\nx: any object with a dims method, or a Tuple of Dimension.\nquery: Tuple or a single Dimension or Dimension Type.\n\nExample\n\njulia> using DimensionalData\n\njulia> A = DimArray(ones(2, 3, 2), (X, Y, Z))\n╭───────────────────────────╮\n│ 2×3×2 DimArray{Float64,3} │\n├───────────────────── dims ┤\n  ↓ X, → Y, ↗ Z\n└───────────────────────────┘\n[:, :, 1]\n 1.0  1.0  1.0\n 1.0  1.0  1.0\n\njulia> dims(A, (X, Y))\n(↓ X, → Y)\n\n\n\n\n\n\ndims(x, [dims::Tuple]) => Tuple{Vararg{Dimension}}\ndims(x, dim) => Dimension\n\nReturn a tuple of Dimensions for an object, in the order that matches the axes or columns of the underlying data.\n\ndims can be Dimension, Dimension types, or Symbols for Dim{Symbol}.\n\nThe default is to return nothing.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.refdims","page":"API","title":"DimensionalData.Dimensions.refdims","text":"refdims(x, [dims::Tuple]) => Tuple{Vararg{Dimension}}\nrefdims(x, dim) => Dimension\n\nReference dimensions for an array that is a slice or view of another array with more dimensions.\n\nslicedims(a, dims) returns a tuple containing the current new dimensions and the new reference dimensions. Refdims can be stored in a field or discarded, as it is mostly to give context to plots. Ignoring refdims will simply leave some captions empty.\n\nThe default is to return an empty Tuple ().\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.header","page":"API","title":"AstroImages.header","text":"header(img::AstroImage)\n\nReturn the underlying FITSIO.FITSHeader object wrapped by an AstroImage. Note that this object has less flexible getindex and setindex methods. Indexing by symbol, Comment, History, etc are not supported.\n\n\n\n\n\nheader(array::AbstractArray)\n\nReturns an empty FITSIO.FITSHeader object when called with a non-AstroImage abstract array.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.wcs","page":"API","title":"AstroImages.wcs","text":"wcs(img)\n\nComputes and returns a list of World Coordinate System WCSTransform objects from WCS.jl. The resultss are cached after the first call, so subsequent calls are fast. Modifying a WCS header invalidates this cache automatically, so users should call wcs(...) each time rather than keeping the WCSTransform object around.\n\n\n\n\n\nwcs(img, index)\n\nComputes and returns a World Coordinate System WCSTransform objects from WCS.jl by index. This is to support files with multiple WCS transforms specified. wcs(img,1) is useful for selecting selecting the first WCSTranform object. The resultss are cached after the first call, so subsequent calls are fast. Modifying a WCS header invalidates this cache automatically, so users should call wcs(...) each time rather than keeping the WCSTransform object around.\n\n\n\n\n\nwcs(array)\n\nReturns a list with a single basic WCSTransform object when called with a non-AstroImage abstract array.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.WCSGrid","page":"API","title":"AstroImages.WCSGrid","text":"WCSGrid(img::AstroImageMat, ax=(1,2), coords=(first(axes(img,ax[1])),first(axes(img,ax[2]))))\n\nGiven an AstroImageMat, return information necessary to plot WCS gridlines in physical coordinates against the image's pixel coordinates. This function has to work on both plotted axes at once to handle rotation and general curvature of the WCS grid projected on the image coordinates.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.composecolors","page":"API","title":"AstroImages.composecolors","text":"composecolors(\n    images,\n    cmap=[\"#F00\", \"#0F0\", \"#00F\"];\n    clims,\n    stretch,\n    contrast,\n    bias,\n    multiplier\n)\n\nCreate a color composite of multiple images by applying imview and blending the results. This function can be used to create RGB composites using any number of channels (e.g. red, green, blue, and hydrogen alpha) as well as more exotic images like blending radio and optical data using two different colormaps.\n\ncmap should be a list of colorants, named colors (see Colors.jl), or colorschemes (see ColorSchemes.jl). clims, stretch, contrast, and bias are passed on to imview. They can be a single value or a list of different values for each image.\n\nThe headers of the returned image are copied from the first image.\n\nExamples:\n\n# Basic RGB\ncomposecolors([redimage, greenimage, blueimage])\n# Non-linear stretch before blending\ncomposecolors([redimage, greenimage, blueimage], stretch=asinhstretch)\n# More than three channels are allowed (H alpha in pink)\ncomposecolors(\n    [antred, antgreen, antblue, anthalp],\n    [\"red\", \"green\", \"blue\", \"maroon1\"],\n    multiplier=[1,2,1,1]\n)\n# Can mix\ncomposecolors([radioimage, xrayimage], [:ice, :magma], clims=extrema)\ncomposecolors([radioimage, xrayimage], [:magma, :viridis], clims=[Percent(99), Zscale()])\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.Zscale","page":"API","title":"AstroImages.Zscale","text":"Zscale(options)(data)\n\nWraps PlotUtils.zscale in a callable with default parameters. This is a common algorithm for agressively stretching astronomical data to see faint structure that originated in IRAF: https://iraf.net/forum/viewtopic.php?showtopic=134139 but is now seen in many other applications/libraries (DS9, Astropy, etc.)\n\nUsage:\n\nimview(img, clims=Zscale())\nimplot(img, clims=Zscale(contrast=0.1))\n\nDefault parameters:\n\nnsamples::Int=1000\ncontrast::Float64=0.25\nmax_reject::Float64=0.5\nmin_npixels::Float64=5\nk_rej::Float64=2.5\nmax_iterations::Int=5\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.Percent","page":"API","title":"AstroImages.Percent","text":"Percent(99.5)\n\nReturns a callable that calculates display limits that include the given percent of the image data. Reproduces the behaviour of the SAO DS9 scale menu.\n\nExample:\n\njulia> imview(img, clims=Percent(90))\n\nThis will set the limits to be the 5th percentile to the 95th percentile.\n\n\n\n\n\n","category":"type"},{"location":"api/#AstroImages.logstretch","page":"API","title":"AstroImages.logstretch","text":"logstretch(num,a=1000)\n\nA log-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.powstretch","page":"API","title":"AstroImages.powstretch","text":"powstretch(num, a=1000)\n\nA power-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.sqrtstretch","page":"API","title":"AstroImages.sqrtstretch","text":"sqrtstretch(num)\n\nA square root stretch (simply defined as Base.sqrt)\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.squarestretch","page":"API","title":"AstroImages.squarestretch","text":"squarestretch(num)\n\nA squarestretch-stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.asinhstretch","page":"API","title":"AstroImages.asinhstretch","text":"asinhstretch(num)\n\nA hyperbolic arcsin stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.sinhstretch","page":"API","title":"AstroImages.sinhstretch","text":"sinhstretch(num)\n\nA hyperbolic sin stretch as defined by the SAO DS9 application: http://ds9.si.edu/doc/ref/how.html\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.powerdiststretch","page":"API","title":"AstroImages.powerdiststretch","text":"powerdiststretch(num, a=1000)\n\nA power distance stretch as defined by astropy.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.copyheader","page":"API","title":"AstroImages.copyheader","text":"copyheader(img::AstroImage, data) -> imgnew\n\nCreate a new image copying the header of img but using the data of the AbstractArray data. Note that changing the header of imgnew does not affect the header of img. See also: shareheader.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.shareheader","page":"API","title":"AstroImages.shareheader","text":"shareheader(img::AstroImage, data) -> imgnew\n\nCreate a new image reusing the header dictionary of img but using the data of the AbstractArray data. The two images have synchronized header; modifying one also affects the other. See also: copyheader.\n\n\n\n\n\n","category":"function"},{"location":"api/#AstroImages.recenter","page":"API","title":"AstroImages.recenter","text":"recenter(img::AstroImage)\nrecenter(img::AstroImage, newcentx, newcenty, ...)\n\nAdjust the dimensions of an AstroImage so that they are centered on the pixel locations given by newcentx, .. etc. This does not affect the underlying array, it just updates the dimensions associated with it by the AstroImage. If no newcent arguments are provided, center the image in all dimensions to the middle pixel (or fractional pixel).\n\nExample:\n\na = AstroImage(randn(11,11))\na[1,1] # Bottom left\na[At(1),At(1)] # Bottom left\nr = recenter(a, 6, 6)\nr[1,1] # Still bottom left\nr[At(1),At(1)] # Center pixel\n\n\n\n\n\n","category":"function"},{"location":"manual/displaying-images/#Displaying-Images","page":"Displaying Images","title":"Displaying Images","text":"","category":"section"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"The imview and implot functions are very similar. Both allow any abstract array of numbers to be rendered into an image or a Plots.jl image series. implot is largely a superset of imview because it also supports colorbars, tick marks, WCS grid lines, overplotting other data & shapes, and automatic axis and title naming (from the FITS header if available).","category":"page"},{"location":"manual/displaying-images/#imview","page":"Displaying Images","title":"imview","text":"","category":"section"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Any AbstractArray (including an AstroImage) can be displayed using imview. This function renders an arbitrary array into an array of RGBA values using a number of parameters. If the input is an AstroImage{<:Number}, an AstroImage{RGBA} will be returned that retains headers, WCS information, etc.","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"using AstroImages\nusing Plots\n\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"The defaults for the imview function are:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"img = randn(50,50);\nimview(img; clims=Percent(99.5), cmap=:magma, stretch=identity, contrast=1.0, bias=0.5)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"We can adjust the color limits explicitly:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; clims=(-1, 1))","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Or pass a function/callable object to calculate them for us:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; clims=Zscale())","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"We can turn off the colormap and use it in grayscale mode:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; cmap=nothing)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Pass any color scheme from ColorSchemes.jl:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; cmap=:ice)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; cmap=:seaborn_rocket_gradient)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Or an RGB or named color value:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(img; cmap=\"#F00\")\nimview(img; cmap=\"red\")","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Let's now switch to an astronomical image:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"fname = download(\n    \"https://ds9.si.edu/download/data/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\neagle = AstroImage(\"eagle-656nmos.fits\")","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"We can apply a non-linear stretch like a log-scale, power-scale, or asinh stretch:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(eagle, stretch=asinhstretch)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Once rendered, we can also tweak the bias and contrast:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(eagle, stretch=asinhstretch, contrast=1.5)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview(eagle, stretch=asinhstretch, contrast=1.5, bias=0.6)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"These are the parameters that change when you click and drag in some applications like DS9.","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Once rendered via imview, the resulting image can be saved in traditional image formats like PNG, JPG, GIF, etc:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"save(\"out.png\", imview(eagle, cmap=:viridis))","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"Very large Images are automatically downscaled to ensure consistent performance using restrict from Images.jl. This function filters the data before downscaling to prevent aliasing, so it may take a moment for truly huge images. In these cases, a faster method that doesn't prevent aliasing would be imview(img[begin:10:end, begin:10:end]) or similar.","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"imview is called automatically on AstroImage{<:Number} when using a Julia environment with rich graphical IO capabilities (e.g. VSCode, Jupyter, Pluto, etc.). The defaults for this case can be modified using AstroImages.set_clims!(...), AstroImages.set_cmap!(...), and AstroImages.set_stretch!(...).","category":"page"},{"location":"manual/displaying-images/#Note-on-Views","page":"Displaying Images","title":"Note on Views","text":"","category":"section"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"The function imview has its name because it produces a \"view\" into the image. The result from calling imview is an object that lazily maps data values into RGBA colors on the fly. This means that if you change the underlying data array, the view will update (the next time it is shown). If you have many data files to render, you may find it faster to create a single imview and then mutate the data in the underlying array. This is faster since imview only has to resolve colormaps and compute limits once.","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"For example:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"data = randn(100,100)\niv = imview(data)\ndisplay(iv)\ndata[1:50,1:50] .= 0\ndisplay(iv)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"iv will reflect the changes to data when it is displayed the second time.","category":"page"},{"location":"manual/displaying-images/#implot","page":"Displaying Images","title":"implot","text":"","category":"section"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"implot  is a Plots.jl recipe, which means before you can use it you first have to load Plots.jl:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"using Plots","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"implot accepts all the arguments imview does for controlling how data is rendered to the screen:","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"implot(img; clims=Percent(99.5), cmap=:magma, stretch=identity, contrast=1.0, bias=0.5)","category":"page"},{"location":"manual/displaying-images/","page":"Displaying Images","title":"Displaying Images","text":"For more on implot, including offset dimensions and world coordinates, see Dimensions and World Coordinates.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/#Dimensions-and-World-Coordinates","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"AstroImages are based on Dimensional Data. Each axis is assigned a dimension name and the indices are tracked.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"using AstroImages\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/#World-Coordinates","page":"Dimensions and World Coordinates","title":"World Coordinates","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"FITS files with world coordinate system (WCS) headers contain all the information necessary to map a pixel location into celestial coordinates & back.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Let's see how this works with a 2D image with RA & DEC coordinates.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"using AstroImages\nusing Plots\n\n# Download a Hubble image of the Eagle nebula\ndownload(\n    \"https://ds9.si.edu/download/data/656nmos.fits\",\n    \"eagle-656nmos.fits\"\n);\neagle = load(\"eagle-656nmos.fits\")","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"This image contains world coordinate system headers. AstroImages.jl uses WCS.jl (and wcslib under the hood) to parse these headers. We can generate a WCSTransform object to inspect:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"wcs(eagle, 1) # specify which coordinate system","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Note that we specify with an index which coordinate system we'd like to use. Most images just contain one, but some contain multiple systems.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"We can lookup a coordinate from the image:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"world = pix_to_world(eagle, [1, 1]) # Bottom left corner","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Or convert back from world coordinates to pixel coordinates: We can lookup a coordinate from the image:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"world_to_pix(eagle, world) # Bottom left corner","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"These pixel coordinates do not necessarily have to lie within the bounds of the original image, and in general lie at a fractional pixel position.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"If an image contains WCS headers, we can visualize them using implot:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(eagle)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"We can adjust the color of the grid:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(eagle, gridcolor=:cyan)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"If these aren't desired, we can turn off the grid or the WCS tick marks:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"plot(\n  implot(eagle, grid=false),\n  implot(eagle, wcsticks=false),\n  size=(900,300),\n  bottommargin=10Plots.mm\n)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Since AstroImages are based on DimensionalData's AbstractDimArray, the mapping between pixel coordinates and world coordinates are preserved when slicing an AstroImage:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"slice1 = eagle[1:800,1:800]\nslice2 = eagle[800:1600,1:800]\nplot(\n  implot(slice1),\n  implot(slice2),\n  size=(900,300),\n  bottommargin=10Plots.mm\n)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"World coordinate queries from that slice are aware of their position in the parent image:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"@show pix_to_world(slice1, [1,1])","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"@show pix_to_world(slice2, [1,1])","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Note that you can query the dimensions of an image using the dims function from DimensionalData:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"dims(slice2)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/#Named-Dimensions","page":"Dimensions and World Coordinates","title":"Named Dimensions","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Each dimension of an AstroImage is named. The automatic dimension names are X, Y, Z, Dim{4}, Dim{5}, and so on; however you can pass in other names or orders to the load function and/or AstroImage contructor:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img = load(\"eagle-656nmos.fits\", 1, (Y,Z))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  Y Sampled 1:1600 ForwardOrdered Regular Points,\n  Z Sampled 1:1600 ForwardOrdered Regular Points","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Other useful dimension names are Spec for spectral axes, Pol for polarization data, and Ti for time axes. These are tracked the same way as the automatic dimension names and interact smoothly with any WCS headers. You can give a dimension an arbitrary name using Dim{Symbol}, e.g., Dim{:Velocity}.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"You can access AstroImages using dimension names:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"eagle[X=100]","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"When indexing into a slice out of a larger parent image or cube, this named access refers to the parent dimensions:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"slice1 = eagle[600:800,600:800]\nslice1[X=At(700),Y=At(700)] == eagle[X=At(700),Y=At(700)] == eagle[700,700]","category":"page"},{"location":"manual/dimensions-and-world-coordinates/#Cubes","page":"Dimensions and World Coordinates","title":"Cubes","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Let's see how this works with a 3D cube.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"using AstroImages\n\nHIcube = load(download(\"https://www.astropy.org/astropy-data/tutorials/FITS-cubes/reduced_TAN_C14.fits\"))","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Notice how the cube is not displayed automatically. We have to pick a specific slice:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"HIcube[Z=228]","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Using implot, the world coordinates are displayed automatically:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(HIcube[Z=228], cmap=:turbo)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"The plot automatically reflects the world coordinates embeded in the file. It displays the x axis in galactic longitude, the y-axis in galactic latitude, and even shows the curved projection from pixel coordinates to galactic coordinates. The title is automatically set to the world coordinate along the Z axis in units of velocity. It also picks up the unit of the data (Kelvins) to display on the colorbar.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"If we pick another slice, the title updates accordingly:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(HIcube[Z=308], cmap=:turbo)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"This works for other slices through the cube as well:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(HIcube[Y=45],  cmap=:turbo, aspectratio=0.3)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/#Custom-Dimensions","page":"Dimensions and World Coordinates","title":"Custom Dimensions","text":"","category":"section"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img = load(\"img.fits\",1,(Y=1:1600,Z=1:1600))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  Y Sampled 1:1600 ForwardOrdered Regular Points,\n  Z Sampled 1:1600 ForwardOrdered Regular Points","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Other useful dimension names are Spec for spectral axes, Pol for polarization data, and Ti for time axes. These are tracked the same was as the automatic dimension names and interact smoothly with any WCS headers.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Often times we have images or cubes that we want to index with physical coordinates where setting up a full WCS transform is overkill. In these cases, it's easier to leverage custom dimensions.","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"For example, one may wish to","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img = load(\"img.fits\",1,(X=801:2400,Y=1:2:3200))\n1600×1600 AstroImage{Float32,2} with dimensions:\n  X Sampled 801:2400 ForwardOrdered Regular Points,\n  Y Sampled 1:2:3199 ForwardOrdered Regular Points\n...","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Unlike OffsetArrays, the usual indexing remains so img[1,1] is still the bottom left of the image; however, data can be looked up according to the offset dimensions using specifiers:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"julia> img[X=Near(2000),Y=1..100]\n50-element AstroImage{Float32,1} with dimensions:\n  Y Sampled 1:2:99 ForwardOrdered Regular Points\nand reference dimensions:\n  X Sampled 2000:2000 ForwardOrdered Regular Points\n  0.0","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"You can adjust the center of an image's dimensions using recenter:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"eagle_cen = recenter(eagle, 801, 801);","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"Unlike an OffsetArray, eagle_cen[1,1] still refers to the bottom left of the image. This also has no effect on broadcasting; eagle_cen .+ ones(1600,1600) is perfectly valid. However, we see the new centered dimensions when we go to plot the image:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(eagle_cen, wcsticks=false)","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"And we can query positions using the offset dimensions:","category":"page"},{"location":"manual/dimensions-and-world-coordinates/","page":"Dimensions and World Coordinates","title":"Dimensions and World Coordinates","text":"implot(eagle_cen[X=-300..300, Y=-300..300], wcsticks=false)","category":"page"},{"location":"manual/preserving-wrapper/#Preserving-the-AstroImage-Wrapper","page":"Preserving Wrapper","title":"Preserving the AstroImage Wrapper","text":"","category":"section"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"Wherever possible, overloads have been added to DimensionalData and AstroImages so that common operations retain the AstroImage wrapper with associated dimensions, FITS header, and WCS information. Most of the time this works automatically if libraries follow good patterns like allocating outputs using Base.similar. However, some other library functions may follow patterns like allocating a plain Array of the correct size and then filling it.","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"To make it easier to work with these libraries, AstroImages exports two functions copyheader and shareheader. These functions wrap an AbstractArray in an AstroImage while copying over the header, dimensions, and WCS info.","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"Consider the function:","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"function badfunc(arr)\n    out = zeros(size(arr)) # instead of similar(arr)\n    out .= arr.^2\n    return out\nend","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"Calling badfunc(astroimg) will return a plain Array .","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"We can use copyheader to retain the AstroImage wrapper:","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"copyheader(astroimg, badfunc(astroimg))","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"For particularly incompatible functions that require an Array (not subtype of AbstractArray) we can go one step further:","category":"page"},{"location":"manual/preserving-wrapper/","page":"Preserving Wrapper","title":"Preserving Wrapper","text":"copyheader(astroimg, worsefunc(parent(astroimg)))\n# Or:\ncopyheader(astroimg, worsefunc(collect(astroimg)))","category":"page"},{"location":"manual/converting-from-rgb/#Converting-From-RGB-Images","page":"Converting from RGB","title":"Converting From RGB Images","text":"","category":"section"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"If you encouter an image in a standard graphics format (e.g. PNG, JPG) that you want to analyze or store in an AstroImage, it will likely contain RGB (or similar) pixels.","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"It is possible to store RGB data in an AstroImage. Let's see how that works:","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"using AstroImages\ndownload(\"https://upload.wikimedia.org/wikipedia/commons/1/15/154-panel_Widefield_Milky_Way_Panorama.jpg\",\"mw-crop2-small.png\")\n\n# First we load it from the PNG file\nmw_png = load(\"mw-crop2-small.png\")","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"You will need the Images.jl package installed to load formats like PNG. Once the RGB image is loaded, we can store it in an AstroImage if we'd like:","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"mw_ai = AstroImage(mw_png)","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"However, we may want to extract the RGB channels first. We can do this using Images.channelview.","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"Images.channelview returns a view into the RGB data as a 3 × X × Y dimension cube. Unfortunately, we will have to permute the dimensions slightly.","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"using Images\nmw_png = load(\"mw-crop2-small.png\")\nmw_chan_view = channelview(mw_png)\nmw_rgb_cube = AstroImage(\n    permutedims(mw_chan_view, (3, 2, 1))[:,end:-1:begin,:],\n    # Optional:\n    (X=:, Y=:, Spec=[:R,:G,:B])\n)","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"Here we chose to mark the third axis as a spectral axis with keys :R, :G, and :B.","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"We can now visualize each channel:","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"mw_rgb_cube[Spec=At(:R)] # Or just: mw_rgb_cube[:,:,1]","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"imview(\n    mw_rgb_cube[Spec=At(:R)],\n    cmap=nothing # Grayscale mode\n)","category":"page"},{"location":"manual/converting-from-rgb/","page":"Converting from RGB","title":"Converting from RGB","text":"using Plots\nimplot(mw_rgb_cube[Spec=At(:B)])","category":"page"},{"location":"guide/photometry/#Photometry","page":"Extracting Photometry","title":"Photometry","text":"","category":"section"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"The following examples are adapted from Photometry.jl to show the same examples combined with AstroImages.jl. To learn how to measure background levels, perform aperture photometry, etc see the Photometry.jl documentation.","category":"page"},{"location":"guide/photometry/#Background-Estimation","page":"Extracting Photometry","title":"Background Estimation","text":"","category":"section"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"From Photometry.jl:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"Estimating backgrounds is an important step in performing photometry. Ideally, we could perfectly describe the background with a scalar value or with some distribution. Unfortunately, it's impossible for us to precisely separate the background and foreground signals. Here, we use mixture of robust statistical estimators and meshing to let us get the spatially varying background from an astronomical photo.Let's show an example [...] Now let's try and estimate the background using estimate_background. First, we'll si gma-clip to try and remove the signals from the stars. Then, the background is broken down into boxes, in this case of size (50, 50). Within each box, the given statistical estimators get the background value and RMS. By default, we use SourceExtractorBackground and StdRMS. This creates a low-resolution image, which we then need to resize. We can accomplish this using an interpolator, by default a cubic-spline interpolator via ZoomInterpolator. The end result is a smooth estimate of the spatially varying background and background RMS.","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"using AstroImages\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"using Photometry\nusing AstroImages\nusing Plots # optional, for implot functionality\n\n# Download our image, courtesy of astropy\nurl = \"https://rawcdn.githack.com/astropy/photutils-datasets/8c97b4fa3a6c9e6ea072faeed2d49a20585658ba/data/M6707HH.fits\"\nimage = AstroImage(download(url))\n\n# sigma-clip\nclipped = sigma_clip(image, 1, fill=NaN)\n\n# get background and background rms with box-size (50, 50)\nbkg, bkg_rms = estimate_background(clipped, 50)\n\nimview(image)\nimview(clipped)\nimview(bkg)\nimview(bkg_rms)","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"Or, if you have Plots loaded:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"using Plots\n\nAstroImages.set_clims!(Percent(99.5))\nAstroImages.set_cmap!(:magma)\nAstroImages.set_stretch!(identity)\n\nplot(\n    implot(image, title=\"Original\"),\n    implot(clipped, title=\"Sigma-Clipped\"),\n    implot(bkg, title=\"Background\"),\n    implot(bkg_rms, title=\"Background RMS\"),\n    layout=(2, 2),\n    ticks=false,\n)","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"We could apply a median filter, too, by specifying filter_size","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"# get background and background rms with box-size (50, 50) and filter_size (5, 5)\nbkg_f, bkg_rms_f = estimate_background(clipped, 50, filter_size=5)\n\n# plot\nplot(\n    implot(bkg, title=\"Unfiltered\", ylabel=\"Background\"),\n    implot(bkg_f, title=\"Filtered\"),\n    implot(bkg_rms, ylabel=\"RMS\"),\n    implot(bkg_rms_f);\n    layout=(2, 2),\n    ticks=false,\n)","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"Now we can see our image after subtracting the filtered background and ready for Aperture Photometry!","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"subt = image .- bkg_f[axes(image)...]\nclims = extrema(vcat(vec(image), vec(subt)))\nplot(\n    implot(image; title=\"Original\", clims),\n    implot(subt; title=\"Subtracted\", clims),\n    size=(1600,1000)\n)","category":"page"},{"location":"guide/photometry/#Source-Extraction","page":"Extracting Photometry","title":"Source Extraction","text":"","category":"section"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"From the background-subtracted image, we can detect all sources in the image:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"# We specify the uncertainty in the pixel data. We'll set it equal to zero.\nerrs = zeros(axes(subt))\nsources = extract_sources(PeakMesh(), subt, errs, true) # sort from brightest to darkest","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"There's over 60,000 sources!","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"We'll define a circular apperture for each source:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"aps = CircularAperture.(sources.x, sources.y, 6)[1:1000] # just brightest thousand point sources","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"We can overplot them on our original image. The coordinate sytem used by the Photometry.jl plot recipes (but not the actual return values) doesn't match AstroImages, so we must transpose our image:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"implot(subt', colorbar=false)\nplot!(aps)","category":"page"},{"location":"guide/photometry/#Measuring-Photometry","page":"Extracting Photometry","title":"Measuring Photometry","text":"","category":"section"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"Finally we can extract the source photometry","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"table = photometry(aps, subt)","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"And plot them:","category":"page"},{"location":"guide/photometry/","page":"Extracting Photometry","title":"Extracting Photometry","text":"scatter(\n    table.xcenter,\n    table.ycenter,\n    aspectratio=1,\n    marker_z=table.aperture_sum,\n    markerstrokewidth=0,\n    label=\"\",\n    framestyle=:box,\n    background_inside=:black,\n    color=:white\n)","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"AstroImage.jl is a Julia package for loading, manipulating, and visualizing astronomical images.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It supports FITS files (FITSIO.jl), world coordinates (WCS.jl), rendering images (Images.jl), and plot recipes (Plots.jl).","category":"page"},{"location":"#Videos","page":"Home","title":"Videos","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AstroImages.jl was presented at JuliaCon in 2022. You can view the talk here.","category":"page"}]
}
